# -*- coding: utf-8 -*-
"""
Created on Wed May 15 09:44:48 2019

@author: msjor
"""
############################################# Imports #################################################
import numpy as np

############################################# Functions ###############################################

def panel_area(t_o, t_e, pr_day, pr_eclipse, theta = 0):
    """t_o = orbital time [sec]
        t_e = eclipse time [sec]
        pr_day = power required during the day [W]
        pr_eclipse = power required during eclipse [W]
        theta = incidence angle [rad]"""
    
    #Mission parameters
    t_d = t_o - t_e #day time [s]
    T = 10 #mission lifetime [years]
    sr = 1358 #solar radiation [W/m^2]
   
    #efficiencies
    eff = 0.28 #solar panel efficiency
    eff_c = 0.9 #path efficiency panels to equipments
    eff_dc = 0.85 #path efficiency panels through batteries to equipment
    
    #solar panel characterisitcs
    wkg = 100 #[W/kg]
    d = 0.9725 #yearly degradation 
    
    #compute required powerzzzz during day and eclipse
    pr_day = pr_day/eff_c #power required during the day EOL [W]
    pr_eclipse = pr_eclipse/eff_dc #power required during eclipse EOL [W]
    
    #EQUATIONS
    pbol = ((pr_day*t_d+pr_eclipse*t_e)/(t_d)/(d**T))/np.cos(theta) #bol power accounting for degradation, eclipse time, incidence angle
    
    psol = pbol/eff #power that needs to be generated by solar panels accounting for their efficiency
    
    #compute area and mass of panels
    A = psol/sr #area
    m = pbol/wkg #mass
        
    return A, m

def comms_mass(power_transmitter, area_antenna, dens_antenna):
   """power_transmitter = power required by the transmitter on the spacecraft [W]
       Area of the antenna [m^2]
       dens_antenna = density of the antenna [kg/m^2], typical values 5-8""" 
   #transmitter characteristics    
   specific_power = 2.9 #W/kg
   dens_trans = 0.75*10**-3 #kg/m3
   mass_trans = power_transmitter/specific_power  #kg
   vol_trans = mass_trans/dens_trans  #m3
   
   #mass of the amplifier 
   mass_amp = 0.07*power_transmitter+0.634 #kg
   
   #Antenna characterisics
   mass_antenna = dens_antenna * area_antenna #kg, antenna on board of spacecraft
   
   #Combine to find mass total communications system
   total_mass = (mass_antenna + mass_amp + mass_trans)*1.3

   return total_mass, vol_trans

def comms(h, freq, G_trans, D_reciever, Ts, R, E_N):
    """Link budget in order to calculate the power required for the transmitter
    h = altitude [km]
    freq = frequency used for communication [Hz]
    G_trans = gain of the transmitting antenna of the spacecraft [dB]
    D_reciever = diameter of the recieving antenna [m]
    Ts = system noise temperature [K]
    R = data rate during communications [bps]
    E_N = signal to noise ratio [dB]"""
    
    #Characterisics of the system
    dish_eff = 0.5  #efficiency of the dish of the recieving station

    #Losses and gains 
    line = 0.89     #line losses [dB]
    rain = 4+3/13*(freq*10**(-9)-27)    #rain attentuation losses [dB], TO BE ADAPTED FOR ALL f
    space = 147.55-20*np.log10(h*10**3)-20*np.log10(freq)   #space losses [dB]
    G_rec = -159.59+20*np.log10(D_reciever)+20*np.log10(freq)+10*np.log10(dish_eff) #gain of the recieving antenna [dB]
    G_trans = G_trans
    
    return 10**((E_N-line-G_trans-space-rain-G_rec-228.6+10*np.log10(Ts)+10*np.log10(R))/10)

def thrust_power(T):
    """Compute the power required to provide a certain thrust for RIT ion thruster
        T = thrust [N]"""
    #returns the power required [W] based on a linear relation between thrust and power 
    return (T+0.00069068)/0.0000156

def power_thrust(P):
    """Compute the thrust created at a certain power setting for RIT ion thruster
    P = power [W]"""
    #returns the thrust provided [N] based on a linear relation between thrust and power 
    return -0.00069068+0.0000156*P

def CD_cylinder(A):
    """"Compute C_D of a cylinder in a rarified flow
        A = frontal area [m^2]"""
    CD = (1.+np.pi/6.*np.sqrt(A/np.pi))*2
    return CD